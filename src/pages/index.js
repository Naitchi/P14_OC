/**
 * Module dependencies.
 */
import Head from 'next/head';
import React, { useState, useMemo } from 'react';
import Link from 'next/link';

// UI Components
import Select from 'react-select';
import DatePicker from 'react-datepicker';

// Custom Components
import ClientOnly from '../components/ClientOnly/ClientOnly';
import Modal from 'ma-librairie-react';

// Styles
import styles from '../styles/Home.module.css';
import 'ma-librairie-react/dist/styles.css';

// Data
import states from '../data/states';

/**
 * Home component - Represents the main Home page for creating employees.
 *
 * @returns {React.Component} The Home component
 */
export default function Home() {
  /**
   * Employee state - Represents an individual employee's data.
   * Modal state - Represents the visibility of the modal component.
   */
  const [employee, setEmployee] = useState({
    firstName: '',
    lastName: '',
    dateOfBirth: '',
    startDate: '',
    department: 'Sales', // Default value for the Select
    street: '',
    city: '',
    states: 'AL', // Default value for the Select
    zipCode: '',
  });
  const [modal, setModal] = useState(false);

  /**
   * Generates the state options for the dropdown select.
   */
  const stateOptions = useMemo(
    () => states.map((s) => ({ value: s.abbreviation, label: s.name })),
    [],
  );

  /**
   * Generates the department options for the dropdown select.
   */
  const departmentOptions = useMemo(
    () => [
      { value: 'Sales', label: 'Sales' },
      { value: 'Marketing', label: 'Marketing' },
      { value: 'Engineering', label: 'Engineering' },
      { value: 'Human Resources', label: 'Human Resources' },
      { value: 'Legal', label: 'Legal' },
    ],
    [],
  );

  /**
   * Saves the employee data to local storage and shows a confirmation modal.
   */
  const save = () => {
    if (typeof window !== 'undefined') {
      const employees = JSON.parse(localStorage.getItem('employees')) || [];
      employees.push(employee);
      localStorage.setItem('employees', JSON.stringify(employees));
      setModal(true);
    }
  };

  /**
   * Handle input change for the employee form.
   *
   * @param {string} field - The field name of the employee object.
   * @param {*} value - The value to be set for the specified field.
   */
  const handleInputChange = (field, value) => {
    setEmployee((prev) => ({ ...prev, [field]: value }));
  };

  return (
    <React.Fragment>
      <Head>
        <title>HRnet</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className={styles.title}>
          <h1>HRnet</h1>
        </div>
        <div className={styles.container}>
          <Link href="employees">View Current Employees</Link>
          <h2>Create Employee</h2>
          <form action="#" id="create-employee">
            <label className={styles.label} htmlFor="first-name">
              First Name
            </label>
            <input
              type="text"
              id="first-name"
              onChange={(event) => handleInputChange('firstName', event.target.value)}
            />
            <label className={styles.label} htmlFor="last-name">
              Last Name
            </label>
            <input
              type="text"
              id="last-name"
              onChange={(event) => handleInputChange('lastName', event.target.value)}
            />
            <label className={styles.label} htmlFor="date-of-birth">
              Date of Birth
            </label>
            <DatePicker
              className={styles.dateInput}
              id="date-of-birth"
              selected={employee.dateOfBirth}
              onChange={(option) => handleInputChange('dateOfBirth', option)}
            />
            <label className={styles.label} htmlFor="start-date">
              Start Date
            </label>
            <DatePicker
              className={styles.dateInput}
              id="start-date"
              selected={employee.startDate}
              onChange={(option) => handleInputChange('startDate', option)}
            />
            <fieldset className={styles.address}>
              <legend>Address</legend>
              <label className={styles.label} htmlFor="street">
                Street
              </label>
              <input
                id="street"
                type="text"
                onChange={(event) => handleInputChange('street', event.target.value)}
              />
              <label className={styles.label} htmlFor="city">
                City
              </label>
              <input
                id="city"
                type="text"
                onChange={(event) => handleInputChange('city', event.target.value)}
              />
              <label className={styles.label} htmlFor="states">
                State
              </label>
              <ClientOnly>
                <Select
                  name="states"
                  inputId="states"
                  options={stateOptions}
                  onChange={(option) => handleInputChange('states', option.value)}
                />
              </ClientOnly>
              <label className={styles.label} htmlFor="zip-code">
                Zip Code
              </label>
              <input
                id="zip-code"
                type="number"
                onChange={(event) => handleInputChange('zipCode', event.target.value)}
              />
            </fieldset>
            <label className={styles.label} htmlFor="department">
              Department
            </label>
            <ClientOnly>
              <Select
                name="department"
                inputId="department"
                options={departmentOptions}
                onChange={(option) => handleInputChange('department', option.value)}
              />
            </ClientOnly>
          </form>
          <button className={styles.save} onClick={save}>
            Save
          </button>
        </div>
        {modal && (
          <Modal
            content={<p>Employee Created!</p>}
            onClose={() => {
              setModal(false);
            }}
          />
        )}
      </main>
    </React.Fragment>
  );
}
