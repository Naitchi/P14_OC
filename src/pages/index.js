import Head from 'next/head';
import React, { useState } from 'react';

import Select from 'react-select';
import DatePicker from 'react-datepicker';
import ClientOnly from '../components/ClientOnly/ClientOnly';

import styles from '../styles/Home.module.css';

const states = [
  {
    name: 'Alabama',
    abbreviation: 'AL',
  },
  {
    name: 'Alaska',
    abbreviation: 'AK',
  },
  {
    name: 'American Samoa',
    abbreviation: 'AS',
  },
  {
    name: 'Arizona',
    abbreviation: 'AZ',
  },
  {
    name: 'Arkansas',
    abbreviation: 'AR',
  },
  {
    name: 'California',
    abbreviation: 'CA',
  },
  {
    name: 'Colorado',
    abbreviation: 'CO',
  },
  {
    name: 'Connecticut',
    abbreviation: 'CT',
  },
  {
    name: 'Delaware',
    abbreviation: 'DE',
  },
  {
    name: 'District Of Columbia',
    abbreviation: 'DC',
  },
  {
    name: 'Federated States Of Micronesia',
    abbreviation: 'FM',
  },
  {
    name: 'Florida',
    abbreviation: 'FL',
  },
  {
    name: 'Georgia',
    abbreviation: 'GA',
  },
  {
    name: 'Guam',
    abbreviation: 'GU',
  },
  {
    name: 'Hawaii',
    abbreviation: 'HI',
  },
  {
    name: 'Idaho',
    abbreviation: 'ID',
  },
  {
    name: 'Illinois',
    abbreviation: 'IL',
  },
  {
    name: 'Indiana',
    abbreviation: 'IN',
  },
  {
    name: 'Iowa',
    abbreviation: 'IA',
  },
  {
    name: 'Kansas',
    abbreviation: 'KS',
  },
  {
    name: 'Kentucky',
    abbreviation: 'KY',
  },
  {
    name: 'Louisiana',
    abbreviation: 'LA',
  },
  {
    name: 'Maine',
    abbreviation: 'ME',
  },
  {
    name: 'Marshall Islands',
    abbreviation: 'MH',
  },
  {
    name: 'Maryland',
    abbreviation: 'MD',
  },
  {
    name: 'Massachusetts',
    abbreviation: 'MA',
  },
  {
    name: 'Michigan',
    abbreviation: 'MI',
  },
  {
    name: 'Minnesota',
    abbreviation: 'MN',
  },
  {
    name: 'Mississippi',
    abbreviation: 'MS',
  },
  {
    name: 'Missouri',
    abbreviation: 'MO',
  },
  {
    name: 'Montana',
    abbreviation: 'MT',
  },
  {
    name: 'Nebraska',
    abbreviation: 'NE',
  },
  {
    name: 'Nevada',
    abbreviation: 'NV',
  },
  {
    name: 'New Hampshire',
    abbreviation: 'NH',
  },
  {
    name: 'New Jersey',
    abbreviation: 'NJ',
  },
  {
    name: 'New Mexico',
    abbreviation: 'NM',
  },
  {
    name: 'New York',
    abbreviation: 'NY',
  },
  {
    name: 'North Carolina',
    abbreviation: 'NC',
  },
  {
    name: 'North Dakota',
    abbreviation: 'ND',
  },
  {
    name: 'Northern Mariana Islands',
    abbreviation: 'MP',
  },
  {
    name: 'Ohio',
    abbreviation: 'OH',
  },
  {
    name: 'Oklahoma',
    abbreviation: 'OK',
  },
  {
    name: 'Oregon',
    abbreviation: 'OR',
  },
  {
    name: 'Palau',
    abbreviation: 'PW',
  },
  {
    name: 'Pennsylvania',
    abbreviation: 'PA',
  },
  {
    name: 'Puerto Rico',
    abbreviation: 'PR',
  },
  {
    name: 'Rhode Island',
    abbreviation: 'RI',
  },
  {
    name: 'South Carolina',
    abbreviation: 'SC',
  },
  {
    name: 'South Dakota',
    abbreviation: 'SD',
  },
  {
    name: 'Tennessee',
    abbreviation: 'TN',
  },
  {
    name: 'Texas',
    abbreviation: 'TX',
  },
  {
    name: 'Utah',
    abbreviation: 'UT',
  },
  {
    name: 'Vermont',
    abbreviation: 'VT',
  },
  {
    name: 'Virgin Islands',
    abbreviation: 'VI',
  },
  {
    name: 'Virginia',
    abbreviation: 'VA',
  },
  {
    name: 'Washington',
    abbreviation: 'WA',
  },
  {
    name: 'West Virginia',
    abbreviation: 'WV',
  },
  {
    name: 'Wisconsin',
    abbreviation: 'WI',
  },
  {
    name: 'Wyoming',
    abbreviation: 'WY',
  },
];

export default function Home() {
  const [state, setState] = useState({
    modal: false,
    employee: {
      firstName: '',
      lastName: '',
      dateOfBirth: '',
      startDate: '',
      department: 'Sales', // c'est un select il faut une valeur par default
      street: '',
      city: '',
      states: 'AL', // c'est un select il faut une valeur par default
      zipCode: '',
    },
  });

  const save = () => {
    if (typeof window !== 'undefined') {
      const employees = JSON.parse(localStorage.getItem('employees')) || [];
      employees.push(state.employee);
      localStorage.setItem('employees', JSON.stringify(employees));
      setState({ ...state, modal: true });
    }
  };

  const handleDateChange = (field, date) => {
    setState({
      ...state,
      employee: { ...state.employee, [field]: date },
    });
  };

  const handleSelectChange = (field, option) => {
    setState({
      ...state,
      employee: { ...state.employee, [field]: option.value },
    });
  };

  return (
    <>
      <Head>
        <title>HRnet</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className={styles.title}>
          <h1>HRnet</h1>
        </div>
        <div className={styles.container}>
          <a href="employees">View Current Employees</a>
          <h2>Create Employee</h2>
          <form action="#" id="create-employee">
            <label className={styles.label} htmlFor="first-name">
              First Name
            </label>
            <input
              type="text"
              id="first-name"
              onChange={(event) =>
                setState({
                  ...state,
                  employee: { ...state.employee, firstName: event.target.value },
                })
              }
            />
            <label className={styles.label} htmlFor="last-name">
              Last Name
            </label>
            <input
              type="text"
              id="last-name"
              onChange={(event) =>
                setState({
                  ...state,
                  employee: { ...state.employee, lastName: event.target.value },
                })
              }
            />
            <label className={styles.label} htmlFor="date-of-birth">
              Date of Birth
            </label>
            <DatePicker
              className={styles.dateInput}
              id="date-of-birth"
              selected={state.employee.dateOfBirth}
              onChange={(date) => handleDateChange('dateOfBirth', date)}
            />
            <label className={styles.label} htmlFor="start-date">
              Start Date
            </label>
            <DatePicker
              className={styles.dateInput}
              id="start-date"
              selected={state.employee.startDate}
              onChange={(date) => handleDateChange('startDate', date)}
            />
            <fieldset className={styles.address}>
              <legend>Address</legend>
              <label className={styles.label} htmlFor="street">
                Street
              </label>
              <input
                id="street"
                type="text"
                onChange={(event) =>
                  setState({
                    ...state,
                    employee: { ...state.employee, street: event.target.value },
                  })
                }
              />
              <label className={styles.label} htmlFor="city">
                City
              </label>
              <input
                id="city"
                type="text"
                onChange={(event) =>
                  setState({
                    ...state,
                    employee: { ...state.employee, city: event.target.value },
                  })
                }
              />
              <label className={styles.label} htmlFor="states">
                State
              </label>
              <ClientOnly>
                <Select
                  name="states"
                  inputId="states"
                  options={states.map((s) => ({ value: s.abbreviation, label: s.name }))}
                  onChange={(option) => handleSelectChange('states', option)}
                />
              </ClientOnly>
              <label className={styles.label} htmlFor="zip-code">
                Zip Code
              </label>
              <input
                id="zip-code"
                type="number"
                onChange={(event) =>
                  setState({
                    ...state,
                    employee: { ...state.employee, zipCode: event.target.value },
                  })
                }
              />
            </fieldset>
            <label className={styles.label} htmlFor="department">
              Department
            </label>
            <ClientOnly>
              <Select
                name="department"
                inputId="department"
                options={[
                  { value: 'Sales', label: 'Sales' },
                  { value: 'Marketing', label: 'Marketing' },
                  { value: 'Engineering', label: 'Engineering' },
                  { value: 'Human Resources', label: 'Human Resources' },
                  { value: 'Legal', label: 'Legal' },
                ]}
                onChange={(option) => handleSelectChange('department', option)}
              />
            </ClientOnly>
          </form>
          <button className={styles.save} onClick={save}>
            Save
          </button>
        </div>
        {state.modal && (
          <div className={styles.bg}>
            <div className={styles.modal} id="confirmation">
              <p> Employee Created!</p>
              <button
                className={styles.cross}
                onClick={() =>
                  setState({
                    ...state,
                    modal: false,
                  })
                }
              >
                X
              </button>
            </div>
          </div>
        )}
      </main>
    </>
  );
}
